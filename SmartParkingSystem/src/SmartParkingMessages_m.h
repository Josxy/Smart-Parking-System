//
// Generated file, do not edit! Created by opp_msgtool 6.0 from ../src/SmartParkingMessages.msg.
//

#ifndef __SMARTPARKINGMESSAGES_M_H
#define __SMARTPARKINGMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class VehicleArrival;
class VehicleDeparture;
class VehicleEntry;
class SlotAssignment;
class SensorMalfunction;
class SensorRepair;
class SimulationEnd;
class NextArrival;
/**
 * Class generated from <tt>../src/SmartParkingMessages.msg:1</tt> by opp_msgtool.
 * <pre>
 * message VehicleArrival
 * {
 *     int vehicleId;
 *     simtime_t arrivalTime;
 * }
 * </pre>
 */
class VehicleArrival : public ::omnetpp::cMessage
{
  protected:
    int vehicleId = 0;
    omnetpp::simtime_t arrivalTime = SIMTIME_ZERO;

  private:
    void copy(const VehicleArrival& other);

  protected:
    bool operator==(const VehicleArrival&) = delete;

  public:
    VehicleArrival(const char *name=nullptr, short kind=0);
    VehicleArrival(const VehicleArrival& other);
    virtual ~VehicleArrival();
    VehicleArrival& operator=(const VehicleArrival& other);
    virtual VehicleArrival *dup() const override {return new VehicleArrival(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getVehicleId() const;
    virtual void setVehicleId(int vehicleId);

    virtual omnetpp::simtime_t getArrivalTime() const;
    virtual void setArrivalTime(omnetpp::simtime_t arrivalTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleArrival& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleArrival& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>../src/SmartParkingMessages.msg:6</tt> by opp_msgtool.
 * <pre>
 * message VehicleDeparture
 * {
 *     int vehicleId;
 *     int slotId;
 *     simtime_t departureTime;
 * }
 * </pre>
 */
class VehicleDeparture : public ::omnetpp::cMessage
{
  protected:
    int vehicleId = 0;
    int slotId = 0;
    omnetpp::simtime_t departureTime = SIMTIME_ZERO;

  private:
    void copy(const VehicleDeparture& other);

  protected:
    bool operator==(const VehicleDeparture&) = delete;

  public:
    VehicleDeparture(const char *name=nullptr, short kind=0);
    VehicleDeparture(const VehicleDeparture& other);
    virtual ~VehicleDeparture();
    VehicleDeparture& operator=(const VehicleDeparture& other);
    virtual VehicleDeparture *dup() const override {return new VehicleDeparture(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getVehicleId() const;
    virtual void setVehicleId(int vehicleId);

    virtual int getSlotId() const;
    virtual void setSlotId(int slotId);

    virtual omnetpp::simtime_t getDepartureTime() const;
    virtual void setDepartureTime(omnetpp::simtime_t departureTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleDeparture& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleDeparture& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>../src/SmartParkingMessages.msg:12</tt> by opp_msgtool.
 * <pre>
 * message VehicleEntry
 * {
 *     int vehicleId;
 *     int slotId;
 * }
 * </pre>
 */
class VehicleEntry : public ::omnetpp::cMessage
{
  protected:
    int vehicleId = 0;
    int slotId = 0;

  private:
    void copy(const VehicleEntry& other);

  protected:
    bool operator==(const VehicleEntry&) = delete;

  public:
    VehicleEntry(const char *name=nullptr, short kind=0);
    VehicleEntry(const VehicleEntry& other);
    virtual ~VehicleEntry();
    VehicleEntry& operator=(const VehicleEntry& other);
    virtual VehicleEntry *dup() const override {return new VehicleEntry(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getVehicleId() const;
    virtual void setVehicleId(int vehicleId);

    virtual int getSlotId() const;
    virtual void setSlotId(int slotId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleEntry& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleEntry& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>../src/SmartParkingMessages.msg:17</tt> by opp_msgtool.
 * <pre>
 * message SlotAssignment
 * {
 *     int vehicleId;
 *     int slotId;
 *     simtime_t assignmentTime;
 * }
 * </pre>
 */
class SlotAssignment : public ::omnetpp::cMessage
{
  protected:
    int vehicleId = 0;
    int slotId = 0;
    omnetpp::simtime_t assignmentTime = SIMTIME_ZERO;

  private:
    void copy(const SlotAssignment& other);

  protected:
    bool operator==(const SlotAssignment&) = delete;

  public:
    SlotAssignment(const char *name=nullptr, short kind=0);
    SlotAssignment(const SlotAssignment& other);
    virtual ~SlotAssignment();
    SlotAssignment& operator=(const SlotAssignment& other);
    virtual SlotAssignment *dup() const override {return new SlotAssignment(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getVehicleId() const;
    virtual void setVehicleId(int vehicleId);

    virtual int getSlotId() const;
    virtual void setSlotId(int slotId);

    virtual omnetpp::simtime_t getAssignmentTime() const;
    virtual void setAssignmentTime(omnetpp::simtime_t assignmentTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SlotAssignment& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SlotAssignment& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>../src/SmartParkingMessages.msg:23</tt> by opp_msgtool.
 * <pre>
 * message SensorMalfunction
 * {
 *     int sensorId;
 *     double repairDuration;
 * }
 * </pre>
 */
class SensorMalfunction : public ::omnetpp::cMessage
{
  protected:
    int sensorId = 0;
    double repairDuration = 0;

  private:
    void copy(const SensorMalfunction& other);

  protected:
    bool operator==(const SensorMalfunction&) = delete;

  public:
    SensorMalfunction(const char *name=nullptr, short kind=0);
    SensorMalfunction(const SensorMalfunction& other);
    virtual ~SensorMalfunction();
    SensorMalfunction& operator=(const SensorMalfunction& other);
    virtual SensorMalfunction *dup() const override {return new SensorMalfunction(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSensorId() const;
    virtual void setSensorId(int sensorId);

    virtual double getRepairDuration() const;
    virtual void setRepairDuration(double repairDuration);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SensorMalfunction& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SensorMalfunction& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>../src/SmartParkingMessages.msg:28</tt> by opp_msgtool.
 * <pre>
 * message SensorRepair
 * {
 *     int sensorId;
 * }
 * </pre>
 */
class SensorRepair : public ::omnetpp::cMessage
{
  protected:
    int sensorId = 0;

  private:
    void copy(const SensorRepair& other);

  protected:
    bool operator==(const SensorRepair&) = delete;

  public:
    SensorRepair(const char *name=nullptr, short kind=0);
    SensorRepair(const SensorRepair& other);
    virtual ~SensorRepair();
    SensorRepair& operator=(const SensorRepair& other);
    virtual SensorRepair *dup() const override {return new SensorRepair(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSensorId() const;
    virtual void setSensorId(int sensorId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SensorRepair& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SensorRepair& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>../src/SmartParkingMessages.msg:32</tt> by opp_msgtool.
 * <pre>
 * message SimulationEnd
 * {
 * }
 * </pre>
 */
class SimulationEnd : public ::omnetpp::cMessage
{
  protected:

  private:
    void copy(const SimulationEnd& other);

  protected:
    bool operator==(const SimulationEnd&) = delete;

  public:
    SimulationEnd(const char *name=nullptr, short kind=0);
    SimulationEnd(const SimulationEnd& other);
    virtual ~SimulationEnd();
    SimulationEnd& operator=(const SimulationEnd& other);
    virtual SimulationEnd *dup() const override {return new SimulationEnd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SimulationEnd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SimulationEnd& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>../src/SmartParkingMessages.msg:35</tt> by opp_msgtool.
 * <pre>
 * message NextArrival
 * {
 * }
 * </pre>
 */
class NextArrival : public ::omnetpp::cMessage
{
  protected:

  private:
    void copy(const NextArrival& other);

  protected:
    bool operator==(const NextArrival&) = delete;

  public:
    NextArrival(const char *name=nullptr, short kind=0);
    NextArrival(const NextArrival& other);
    virtual ~NextArrival();
    NextArrival& operator=(const NextArrival& other);
    virtual NextArrival *dup() const override {return new NextArrival(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NextArrival& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NextArrival& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline VehicleArrival *fromAnyPtr(any_ptr ptr) { return check_and_cast<VehicleArrival*>(ptr.get<cObject>()); }
template<> inline VehicleDeparture *fromAnyPtr(any_ptr ptr) { return check_and_cast<VehicleDeparture*>(ptr.get<cObject>()); }
template<> inline VehicleEntry *fromAnyPtr(any_ptr ptr) { return check_and_cast<VehicleEntry*>(ptr.get<cObject>()); }
template<> inline SlotAssignment *fromAnyPtr(any_ptr ptr) { return check_and_cast<SlotAssignment*>(ptr.get<cObject>()); }
template<> inline SensorMalfunction *fromAnyPtr(any_ptr ptr) { return check_and_cast<SensorMalfunction*>(ptr.get<cObject>()); }
template<> inline SensorRepair *fromAnyPtr(any_ptr ptr) { return check_and_cast<SensorRepair*>(ptr.get<cObject>()); }
template<> inline SimulationEnd *fromAnyPtr(any_ptr ptr) { return check_and_cast<SimulationEnd*>(ptr.get<cObject>()); }
template<> inline NextArrival *fromAnyPtr(any_ptr ptr) { return check_and_cast<NextArrival*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SMARTPARKINGMESSAGES_M_H

